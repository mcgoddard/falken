service: falken-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-2:130979854346:table/scoresTable'

functions:
  app-api:
    handler: api.handle
    memorySize: 128
    reservedConcurrency: 10
    events:
      - httpApi:
          path: /{any+}
          method: '*'
      - httpApi:
          path: /
          method: '*'
  score-updates:
    handler: updates.handle
    memorySize: 128
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScoresQueue
              - Arn

resources:
  Resources:
    scoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: scoresTable
        AttributeDefinitions:
          - AttributeName: team_name
            AttributeType: S
          - AttributeName: score
            AttributeType: N
        KeySchema:
          - AttributeName: team_name
            KeyType: HASH
          - AttributeName: score
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    siteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: falken-app
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
        WebsiteConfiguration:
          IndexDocument: index.html
    ScoresQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ScoresQueue"

plugins:
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: falken-app
      localDir: ../app/dist
      acl: public-read
